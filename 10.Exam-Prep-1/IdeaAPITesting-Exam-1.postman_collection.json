{
	"info": {
		"_postman_id": "daa225f3-67e8-40dc-8e83-d1b9ce18d348",
		"name": "IdeaAPITesting-Exam-1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28660138"
	},
	"item": [
		{
			"name": "Login and Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json()\r",
							"pm.collectionVariables.set(\"accessToken\", responseData.accessToken)\r",
							"\r",
							"pm.test(\"Body has email, password and accessToken\", () => {\r",
							"    pm.expect(responseData.email).not.to.be.empty\r",
							"    pm.expect(responseData.password).not.to.be.empty\r",
							"    pm.expect(responseData.accessToken).not.to.be.empty\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test1@test.com\",\r\n    \"password\": \"1234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/User/Authentication",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"pm.test(\"Response message is 'Successfully created!'\", () => {\r",
							"    pm.expect(responseData.msg).to.eql(\"Successfully created!\")\r",
							"})\r",
							"\r",
							"const ideaTitle = pm.collectionVariables.get(\"randomTitle\")\r",
							"\r",
							"pm.test(\"Idea title and description are correct\", () => {\r",
							"    pm.expect(responseData.idea.title).to.eql(ideaTitle)\r",
							"    pm.expect(responseData.idea.description).to.eql(\"Description of the Idea for \" + ideaTitle)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomNum = Math.floor(Math.random()*1000)\r",
							"var randomTitle = \"title\" + randomNum\r",
							"\r",
							"pm.collectionVariables.set(\"randomTitle\", randomTitle)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{randomTitle}}\",\r\n    \"description\": \"Description of the Idea for {{randomTitle}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Idea/Create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Ideas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"pm.test(\"Response data is an array with more than 0 items\", () => {\r",
							"    pm.expect(responseData).to.be.an(\"array\")\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0)\r",
							"})\r",
							"\r",
							"const lastIdeaId = responseData[responseData.length - 1].id\r",
							"pm.collectionVariables.set(\"lastIdeaId\", lastIdeaId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/Idea/All",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit the Last Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"pm.test(\"Response message is 'Edited successfully'\", () => {\r",
							"    pm.expect(responseData.msg).to.eql(\"Edited successfully\")\r",
							"})\r",
							"\r",
							"pm.test(\"Idea title and description are correct\", () => {\r",
							"    pm.expect(responseData.idea.title).to.eql(\"editedTitle\")\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"editedTitle\",\r\n    \"description\": \"Description of the Idea for editedTitle\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Idea/Edit?IdeaId={{lastIdeaId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"Edit"
					],
					"query": [
						{
							"key": "IdeaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the Edited Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const responseText = pm.response.text()\r",
							"\r",
							"pm.test(\"Response is a string\", () => {\r",
							"    pm.expect(responseText).is.a(\"string\")\r",
							"})\r",
							"\r",
							"pm.test(\"Response message is 'The idea is deleted!'\", () => {\r",
							"    pm.expect(responseText).to.contain(\"The idea is deleted!\")\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/Idea/Delete?IdeaId={{lastIdeaId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"Delete"
					],
					"query": [
						{
							"key": "IdeaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://softuni-qa-loadbalancer-2137572849.eu-north-1.elb.amazonaws.com:84",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "lastIdeaId",
			"value": ""
		}
	]
}